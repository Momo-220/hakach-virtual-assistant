import { GoogleGenerativeAI } from '@google/generative-ai';
import { GEMINI_API_KEY } from '../config/gemini';
import axios from 'axios';

// Initialiser l'API Google Generative AI
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

// Type pour les langues prises en charge
export type SupportedLanguage = 'en';

// Langues prises en charge
export const supportedLanguages: Record<SupportedLanguage, string> = {
  en: 'English'
};

// Messages de bienvenue par langue
export const welcomeMessages = {
  en: `üëã Hello!
I am Hakach, your virtual assistant.

I'm here to assist you with all your money transfers. Feel free to ask me any questions about our services, rates, or how transfers work. How can I help you today? üòä`
};

// Ajouter des r√©ponses plus humaines et chaleureuses
export const personalizedResponses = {
  greeting: {
    en: [
      "Wonderful to see you! üí´",
      "Happy to welcome you! ‚ú®",
      "Delighted to have you here! üåü",
      "Hello there! How are you doing today? üòä",
      "Hi! I hope you're having a great day! üå∏",
      "Hey! What can I help you with? üíù"
    ]
  },
  
  understanding: {
    en: [
      "I completely understand what you need üí≠",
      "Ah yes, I see exactly what you mean! üìù",
      "Got it, that's a great question! ‚ú®",
      "I understand your concern perfectly ü§î",
      "Perfect, let me explain that for you! üí°",
      "Of course, it's totally normal to wonder about this! üòä"
    ]
  },
  
  closing: {
    en: [
      "Is there anything else I can help you with? I'm all ears! üåü",
      "Please don't hesitate if you have more questions! üí´",
      "I'm here if you'd like to know more! ‚ú®",
      "Do you need any other information? I'd be happy to help you further! ü§ó",
      "If anything else is on your mind, just let me know! üíù",
      "I'm here to support you, don't hesitate! üå∏"
    ]
  }
};

// Fonction pour obtenir une r√©ponse personnalis√©e al√©atoire
export const getRandomResponse = (category: keyof typeof personalizedResponses, language: SupportedLanguage): string => {
  const responses = personalizedResponses[category][language];
  return responses[Math.floor(Math.random() * responses.length)];
};

// Fonction pour d√©tecter la langue (always returns English)
export async function detectLanguage(text: string): Promise<SupportedLanguage> {
  // Always return English since it's the only supported language
  return 'en';
}

// Fonction pour interroger le mod√®le Gemini avec une question
export async function queryGemini(
  question: string,
  knowledgeBase: { question: string; answer: string }[],
  language: SupportedLanguage = 'en'
): Promise<string> {
  try {
    // Cr√©er un contexte √† partir de la base de connaissances
    const context = knowledgeBase
      .map((item) => `Q: ${item.question}\nR: ${item.answer}`)
      .join('\n\n');

    // Obtenir une r√©ponse de compr√©hension al√©atoire
    const understandingResponse = getRandomResponse('understanding', language);

    // Construire un prompt d√©taill√© pour obtenir une r√©ponse plus professionnelle et humaine
    const prompt = `
Tu es Sarah, une vraie conseill√®re financi√®re exp√©riment√©e et bienveillante chez Hakach Transfert. Tu as plusieurs ann√©es d'exp√©rience dans le domaine des transferts d'argent et tu adores aider tes clients.

CONTEXTE - Base de connaissances de Hakach Transfert :
${context}

PERSONNALIT√â DE SARAH :
- Chaleureuse, empathique et professionnelle
- Utilise un langage naturel et conversationnel
- Ajoute des touches personnelles et √©motionnelles appropri√©es
- Reformule les informations techniques de mani√®re accessible
- Montre de l'int√©r√™t genuine pour aider le client
- Utilise des exemples concrets quand c'est pertinent
- √âvite les r√©ponses robotiques ou trop formelles

DIRECTIVES IMPORTANTES :
1. NE JAMAIS copier-coller les r√©ponses de la base de connaissances
2. TOUJOURS reformuler avec tes propres mots de mani√®re naturelle
3. Ajouter des nuances √©motionnelles et personnelles appropri√©es
4. Utiliser des transitions fluides et des expressions naturelles
5. R√©pondre UNIQUEMENT en ${supportedLanguages[language]}
6. Adapter le ton selon le contexte (rassurant pour les probl√®mes, enthousiaste pour les avantages)
7. Utiliser des √©mojis avec parcimonie mais de mani√®re pertinente
8. Montrer que tu comprends les pr√©occupations du client
9. IMP√âRATIF : Donner des r√©ponses COURTES et CONCISES (maximum 3-4 phrases)
10. Aller droit au but tout en restant chaleureuse et humaine
11. SP√âCIAL SALUTATIONS : Si c'est juste une salutation (bonjour, salut, hello, etc.), r√©ponds avec 1-2 mots maximum de politesse (ex: "Bonjour ! üòä", "Salut ! ‚ú®", "Hello ! üí´")

QUESTION DU CLIENT : ${question}

R√©ponds comme Sarah le ferait naturellement, avec authenticit√© et chaleur humaine, en reformulant les informations de la base de connaissances de mani√®re conversationnelle et personnalis√©e. GARDE TA R√âPONSE COURTE ET DIRECTE.`;

    const result = await model.generateContent(prompt);
    const response = result.response.text();

    // Formater la r√©ponse pour une meilleure pr√©sentation
    return response
      .trim()
      .replace(/\n{3,}/g, '\n\n') // R√©duire les espaces multiples
      .replace(/^(- |\d\. )/gm, '‚Ä¢ '); // Remplacer les tirets et num√©ros par des puces

  } catch (error) {
    console.error('Erreur lors de la requ√™te √† l\'API Gemini:', error);
    
    // Messages d'erreur personnalis√©s par langue avec plus d'humanit√©
    const errorMessages: Record<SupportedLanguage, string> = {
      en: "üòî Oh dear, I'm having a small technical hiccup right now... Could you ask me again? I'll do everything I can to help you! ü§ó"
    };
    
    return errorMessages[language];
  }
} 

const BASE_URL = '/api/gemini';

export interface GeminiResponse {
  success: boolean;
  data: any;
  error?: string;
}

export const geminiService = {
  async getCorridorData(): Promise<GeminiResponse> {
    try {
      console.log('Fetching corridor data...');
      const response = await axios.get(`${BASE_URL}/corridor`, {
        timeout: 10000,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      console.log('Corridor data response:', response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error('Error fetching corridor data:', error);
      return { success: false, data: null, error: 'Erreur lors de la r√©cup√©ration des donn√©es du corridor' };
    }
  },

  async getOrderQuery(): Promise<GeminiResponse> {
    try {
      console.log('Fetching order query data...');
      const response = await axios.get(`${BASE_URL}/order-query`, {
        timeout: 10000,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      console.log('Order query data response:', response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error('Error fetching order query data:', error);
      return { success: false, data: null, error: 'Erreur lors de la r√©cup√©ration des donn√©es de commande' };
    }
  },

  async getRates(primaryCurrency?: string, secondaryCurrency?: string): Promise<GeminiResponse> {
    try {
      console.log('Fetching rates data...');
      let url = `${BASE_URL}/rates`;
      
      // Si les devises sont sp√©cifi√©es, ajouter les param√®tres √† l'URL locale
      if (primaryCurrency && secondaryCurrency) {
        url += `?primary=${primaryCurrency}&secondary=${secondaryCurrency}`;
      }
      
      console.log('Requesting rates from:', url);
      
      const response = await axios.get(url, {
        timeout: 10000,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      console.log('Rates data response:', response.data);
      return { success: true, data: response.data };
    } catch (error) {
      console.error('Error fetching rates data:', error);
      return { success: false, data: null, error: 'Erreur lors de la r√©cup√©ration des taux' };
    }
  }
}; 